#define BUILDING_NODE_EXTENSION

// Закоментированый кусок кода это пример простейшего модуля для Node.js, hello-world так сказать

/*#include <node.h>
using namespace v8;

//fassign создаёт ссылку на JS функцию которую потом мы можем вызывать из С++.
// например из недр OS пришло клавиатурное сообщение, оно наконец оказалось в этом файле
//в v8win::onKey и далее мы его отправляем в glxwin.js:GLXWIN.onKey()
//регистрируется так:
//	fassign(onKey)
//вызывается так
//	js_call(onKey, 3); //3--количество параметров
//однако, после экспериментов и раздумий было решено отказаться от вызова JS функций из С++
//вместо этого решено записывать в глобальный массив имя функции и параметры и выходить из С++
//а main loop уже в JavaScript увидит, что массив не пуст и вызовет нужную фу.
//это сделано, чтобы проще отлаживать, видеть стек вызовов и обрабатывать исключения
//на данный момент некоторые функции написаны "по-старому" а некоторые "по-новому"
//как это не печально. переписаны пока onPaint и onKey

#define fassign(name) name = Persistent<Function>::New(Handle<Function>::Cast(Handle<Object>::Cast(a[0])->Get(String::NewSymbol(#name))));

Persistent<Function> paint, print;
Handle<Value> ARGS[10];//чтобы не объявлять снова и снова, выделен глобальный массив параметров для отправки в JS через js_call (deprecated)

Handle<Value> reg(const Arguments& a) {
	HandleScope scope;
	fassign(print)
	fassign(paint)
	return scope.Close(String::New("GLXWIN!"));
}

Handle<Value> run(const Arguments& a) {
	HandleScope scope;
	paint->Call(Context::GetCurrent()->Global(), 0, ARGS);
	return print->Call(Context::GetCurrent()->Global(), 0, ARGS);
	return Undefined();
}

void init(Handle<Object> exports) {
//стартовая функция Node.js аддона
	exports->Set(String::NewSymbol("reg"), FunctionTemplate::New(reg)->GetFunction());
	exports->Set(String::NewSymbol("run"), FunctionTemplate::New(run)->GetFunction());
}

NODE_MODULE(glxwin, init)// объявляем модуль. чтобы делать модули для ноды, надо перед доками
//самой ноды читать доки по v8-embedded, там все основы.
*/

#define fassign(name) name = Persistent<Function>::New(Handle<Function>::Cast(Handle<Object>::Cast(a[0])->Get(String::NewSymbol(#name))));

#include <node.h>
#include <v8.h>
#include "glxwin.h"

using namespace v8;

//#include "nativeutil.h"

//JS калбэки
Persistent<Function> onChar, onCursor, onMouse,  
//onPaint, onKey, 
onTimer, onSize, onPipe, onFocus;
Persistent<Object> glxwin, node_exports; // наверное это одно и то же
Persistent<Array> callbacks;// вот он - глобальный массив куда записываются имена функций которые будут вызываны после выхода из С++

Persistent<Context> context;
Handle<Value> ARGS[10];
//конвертор указателей в JavaScript Number (возможны проблемы при переносах на разные архитектуры)
double HANDLE(void *x) { return 0 + (long)x; }
void *HANDLE(double x) { return (void*) (long) x; }
//хэлперы для считывания параметров
void* HANDLE(Local<Value> t) { return HANDLE(Handle<Number>::Cast(t)->Value()); }
double NUMBER(Local<Value> t) { return Handle<Number>::Cast(t)->Value(); }
wstr WSTR(Local<Value> t) {
	String::Value s(t);
	wstr w; w(s.length()); if (!w) move(*s, *w, w.occu());
	return w;
}


#define function(name) Handle<Value> name(const Arguments& a)
#include "v8util.h"
#include "v8file.h"
#include "shellpipe.h"
//double main_window_handle = 0;
namespace unixstuff {
#include <time.h>
#include <dirent.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>
#include <termios.h>
#include <pty.h>
#include <stdlib.h>

#include <sys/types.h>
}
//собствено вызов JS функции f  с числом параметров arg_count заранее засунутых в глобальную ARGS
Handle<Value> js_call(Handle<Function> f, int arg_count) {
	TryCatch t;
	Handle<Value> R = f->Call(glxwin, arg_count, ARGS);
	if (R.IsEmpty()) {
		printf("%s\n", *v8_error_as_string(& t).compat());
//		Result->Set(String::New("success"), Boolean::New(false));
//		Handle<Object> E = v8_error_as_object(&try_catch);
//		E->Set(String::New("source"), source);
//		Result->Set(String::New("error"), E);
//		return handle_scope.Close(Result);
	}
	return R;
}

//наследуем v8win от win (удобной мини либы для создания и поддержания окон)
//есть два варианта 1) переписать тут, забыть про win 2) тут менять поменьше но сделать совместимый предок win
//но это дело вкуса

struct inherit(v8win, win) {
	int font_color;
	v8win() : font_color(0) {
	}
	~v8win() {
	}
	on_created {
//		add_timer(1000, 10);
	}

//это уже не нужно, сначала деодар не использовал node.js а только v8 и там не было таймеров
	on_timer {
		if (id == 1000) {
//			shell_timer();
			return;
		}
		HandleScope handle_scope;
		ARGS[0] = Number::New(HANDLE(this));
		ARGS[1] = Number::New(id);
		js_call(onTimer, 2);
	}
//лучший пример вызова JS из С++ "по-новому"	
	on_key {
		HandleScope handle_scope; //это просто всегда должно быть, это волшебство
		Handle<Object> B = Object::New(); // создаём новый объект "B = {}"
		B->Set(String::New("call"), String::New("onKey")); // B.call = 'onKey'
		B->Set(String::New("handle"), Number::New(HANDLE(this))); // B.handle = PointerToNumer(this)
		B->Set(String::New("down"), Boolean::New(down)); //B.down = down кнопка нажата или отпущена?
		if (charcode != 0) B->Set(String::New("char"), String::New((uint16_t*)&charcode, 1));
		//char устанавливается если в результате нажатия был сгенерирован символ, например если нажать shift то char=undefined если нажать 'a' то char='a'.
		//это очень удобное решение, совместить сообщения типа onChar и onKey. просто не всегда char!=null
		B->Set(String::New("key"), Integer::New(key));
		B->Set(String::New("physical"), Boolean::New(physical));
//		Context::GetCurrent()->Global()->Set(String::New("glxwin_key"), B);
		int len = callbacks->Length(); // callbacks.push(B)
		callbacks->Set(len, B); // другово способа сделать push пока не встречал
	}
	
	on_paint {
		//работает как и onKey только нет параметров кроме ссылки на объект v8win и имени 'onPaint'
		Handle<Object> B = Object::New();
		B->Set(String::New("call"), String::New("onPaint"));
		B->Set(String::New("handle"), Number::New(HANDLE(this)));
		int len = callbacks->Length();
		callbacks->Set(len, B);
	}

	on_mouse {
		//а вот пример фу которая работает по-старому, устанавливаем параметры
		HandleScope handle_scope;
		ARGS[0] = Number::New(HANDLE(this));
		ARGS[1] = Number::New(button); // 0-левая 1-правая 2-средняя(колесо как кнопка), 3-колесо (верх/низ==down:true/false), 10 двойной клик 21-22 колесо-влево-вправо
//		смотри samples/mouse.deo
		ARGS[2] = Number::New(down);// true/false
		ARGS[3] = Number::New(x);
		ARGS[4] = Number::New(y);
//		вызываем, 5 количество передаваемых параметров
		js_call(onMouse, 5);
	}
	on_size {
//	вызывается если система или юзер поменяли размеры окна
		HandleScope handle_scope;
		ARGS[0] = Number::New(HANDLE(this));
		ARGS[1] = Number::New(w);// новые размеры окна
		ARGS[2] = Number::New(h);
		js_call(onSize, 3);
	}
	on_cursor {
//		вызывается каждый раз как указатель мыши двигается по экрану
		HandleScope handle_scope;
		ARGS[0] = Number::New(HANDLE(this));
		ARGS[1] = Number::New(x);
		ARGS[2] = Number::New(y);
		js_call(onCursor, 3);
	}
	on_focus {
//		вызывается когда окно стало в фокусе или утеряло его
		HandleScope handle_scope;
		ARGS[0] = Number::New(HANDLE(this));
		ARGS[1] = Boolean::New(on);
		js_call(onFocus, 2);
	}
};

//#include "termwin.h"

/*function(print) {
	HandleScope handle_scope;
	wstr w = WSTR(a[0]);
	printf(*w2utf(w));
	return Undefined();
}*/

//в node.js нет execSync а иногда оно приходится к месту
//на маке есть свой клас строк NSString тут можно его совместить с popen()
//кстати внутрене все строки в v8 это utf16le(aka ucs2)
//в моей собственой либе str и wstr это байтные-ascii и вордовые строки соответствено.
//кстати чтобы использовать wchar_t надо ключ компиляции -fshort-wchar иначе они будут не 2 а 4 байта
//в скором времени в v8 и ноде появится execSync и всё это можно будет просто выкинуть

wstr invoke(str cmd) {
	wstr R;
	FILE* pipe = popen(*cmd, "r" );
	if (pipe == NULL ) {
		return (wstr)"native_sh(" + cmd + ") failed";
	}
	char buf[128];
	while (!feof(pipe)) {
		if (fgets(buf, 128, pipe)) {
			str s = buf;
			R / utf2w(s);
		}
	}
	pclose(pipe);
	return R;
}

function (native_sh) {
	HandleScope handle_scope;
	wstr txt = WSTR(a[0]);
	wstr R = invoke(w2utf(txt));
	return String::New((uint16_t*)*R);
}

//function (native_exec) {
//	HandleScope handle_scope;
//	wstr cmd = WSTR(a[0]);
//	using namespace unixstuff;
//	if (fork() == 0) {
//		//while (true)
//		fcntl(XConnectionNumber(MESS.d), F_SETFD, fcntl(XConnectionNumber(MESS.d), F_GETFD) | FD_CLOEXEC);
//		wstr R = invoke(cmd);
//		exit(0);
//	}
////	system(*w2utf(cmd));
//	return Undefined();
//}

function (create_win) {
// собствено создание окна, можно игнорировать все параметры, это танцы с бубнами
//первые парам это хендл окна парента, можно использовать, но деодар пока не использует, ограничивается одним окном
//второй парам это файл шрифта, скорее всего на маке вы будете использовать не файл шрифта, а его имя
//пока можно, извините, захардкодить, или из системного реестра прочитать моношириный шрифт по умолчанию
//третий парам размер шрифта, четвертый и пятый это тонкие подстройки которые вообще не должны быть использованы, но использую потому что не являюсь экспертом в либе freetype

	HandleScope handle_scope;
	v8win *parent = (v8win*) HANDLE(a[0]);
	v8win *W = new v8win;
	wstr fontName = "/usr/share/fonts/truetype/ttf-dejavu/DejaVuSansMono.ttf";
	int fontSize = 18;
	if (a[1] != Undefined()) fontName = WSTR(a[1]);
	if (a[2] != Undefined()) fontSize = NUMBER(a[2]);
	W->create();
	W->curfont = add_font(fontName, fontSize);
	if (a[3] != Undefined()) MESS.Fonts[W->curfont].extra_inter_char = NUMBER(a[3]);
	if (a[4] != Undefined()) MESS.Fonts[W->curfont].tune_y = NUMBER(a[4]);
//	if (main_window_handle == 0) main_window_handle = HANDLE(W);
	return Number::New(HANDLE(W));
}

//смотрите: glxwin.js:glxwin.mainLoop()
//та организован main loop как в играх. step() это один шаг проверки всех сообщений.
//на винде это аналог GetMessage(), если возвращает true значит что то случилось, в противном случае програма засыпает на несколько милисекунд
//это один шаг для всех окон, (если окон более 1)

function (step) {
	HandleScope handle_scope;
	bool result = MESS.step();
	return Boolean::New(result);
}

// функция paint() ничего не рисует, а только увеличивает счётчик, а step_renders() прорисовывает те окна где счётчик > 0 и устанавливает счётчик в 0.
// это называется frame balancing, кажется, то есть если вы вызвали paint() 10 раз подряд за одну тысячную долю секунды, то реальная отрисовка будет только одна

function (step_renders) {
	HandleScope handle_scope;
	MESS.step_renders();
	return Undefined();
}

//показать show() и спрятать hide() окно

function (show) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	W->show();
	return Undefined();
}

function (hide) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	W->hide();
	return Undefined();
}

//увеличить счётчик прорисовок для данного окна

function (repaint) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	W->paint();
	return Undefined();
}

//прорисовать окно "насильно" прямо сейчас, не используя счётчик прорисовок

function (force_repaint) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	W->render();
	return Undefined();
}

//это не используется, удалю потом

function (print) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	wstr txt = WSTR(a[1]);
	int x = NUMBER(a[2]);
	int y = NUMBER(a[3]);
	glColor4ubv((GLubyte*)&W->font_color);
	W->print(txt, x, y);
	return Undefined();
}

//не используется, возвращает размер текста в пикселях

function (text_extent) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	wstr txt = WSTR(a[1]);
	int *N = W->text_extent(txt);
	Handle<Array> A = Array::New(2);
	A->Set(0, Integer::New(N[0]));
	A->Set(1, Integer::New(N[1]));
	return handle_scope.Close(A);
}

//нарисовать прямоугльник обозначеный x,y,x1,y1 и цвет

function (crect) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	int x = NUMBER(a[1]);
	int y = NUMBER(a[2]);
	int x1 = NUMBER(a[3]);
	int y1 = NUMBER(a[4]);
	unsigned int color = NUMBER(a[5]);
//	color |= 0xff000000;
	W->crect(x, y, x1, y1, color);
	return Undefined();
}

//таймеры можно удалить
/*
function(native_add_timer) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	int id = NUMBER(a[1]);
	int T = NUMBER(a[2]);
	W->add_timer(id, T);
	return Undefined();
}

function(native_del_timer) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	int id = NUMBER(a[1]);
	W->del_timer(id);
	return Undefined();
}
*/

//установить размеры и положение окна, то есть это resize() & move() в одном флаконе
function(set_xywh) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	if (a[1] != Undefined()) {
		double x = NUMBER(a[1]);
		double y = NUMBER(a[2]);
		W->move(x, y);
	}
	if (a[3] != Undefined()) {
		double w = NUMBER(a[3]);
		double h = NUMBER(a[4]);
		W->size(w, h);
	}
	return Undefined();
}

//получить измерения окна
function(get_xywh) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	Handle<Array> A = Array::New(4);
	A->Set(0, Integer::New(W->x));// TODO: fix this
	A->Set(1, Integer::New(W->y));
	A->Set(2, Integer::New(W->w));
	A->Set(3, Integer::New(W->h));
	return handle_scope.Close(A);
}

//установить цвет текста по умолчанию, используется фу print(), (не нужно, было для тестов)
function(font_color) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	unsigned int color = NUMBER(a[1]);
	W->font_color = color | 0xff000000;
	return Undefined();
}
/*
function (yaui_platform) {
	HandleScope handle_scope;
	return String::New("linux");
}
*/

//ещё одна ненужная фу, использовалась с print(), в деодаре пока один шрифт устанавливаемый при запуске приложения, а цвет задаётся в в самой главной и великой фу color_text()
function(apply_font) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	wstr name = WSTR(a[1]);
	int size = NUMBER(a[2]);
	int color = NUMBER(a[3]);
	int bgcolor = NUMBER(a[4]);
//	int font_id = W->S->apply_font(name, size, color);
	Handle<Array> A = Array::New(3);
	int *N = W->text_extent('A');
	A->Set(0, Integer::New(N[0]));
	A->Set(1, Integer::New(N[1]));
	A->Set(2, Integer::New(W->curfont));
	return handle_scope.Close(A);
}

/*function(main_handle) {
	HandleScope handle_scope;
	return Number::New(main_window_handle);
}*/

//это не используется, для отладки было

function(get_xwindow_handle) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	return Number::New((int)(W->window));
}
//самая великая фу (по размеру), выводит блок текста, то есть деодар выводит весь экран одним вызовом этой фу:
//W-хэндл окна
//x,y в пикселях куда выводить на экране (контексте окна)
//w,h в символах размер двухмерного массива букв
//TEXTS[ряд][символ] двухмерный массив букв
//COLORS[ряд][символ] двухмерный массив цветов
//пример вызова из JS:
//	color_text(0, 0, 0, 3, 3, 
//		[['a','b','c'],['1','2','3'],['x','y','z']],
//		[[0,0,0],[0xf,0xf,0xf],[0xf000,0xf000,0xf000]]
//	)
// цвета упакованы, например белое на красном: 0x0fff000f
// 0xARGBARGB прозрачность(А) можно не исполнять пока, сам её не допилил как надо (в основном оттого, что не ясно на каком уровне её делать, но в будущем её пригодится, так что можно её выполнить)
// http://stackoverflow.com/questions/21770799/convert-0x1234-to-0x11223344

function (color_text) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	yaglfont::Font *f = & MESS.Fonts[W->curfont];
	int x = NUMBER(a[1]);
	int y = NUMBER(a[2]);
	int w = NUMBER(a[3]);
	int h = NUMBER(a[4]);
	glLoadIdentity();
	glTranslatef(x, y, 0);
	Handle<Array> TEXTS = Handle<Array>::Cast(a[5]);
	Handle<Array> COLORS = Handle<Array>::Cast(a[6]);
	int n = 0;
	wstr s; s(w); unsigned int *BITS = new unsigned int [w];
	for (int Y = 0; Y < h; Y++) {
		Handle<Array> TEXT = Handle<Array>::Cast(TEXTS->Get(Y));
		Handle<Array> COLOR = Handle<Array>::Cast(COLORS->Get(Y));
		for (int X = 0; X < w; X++) {
			uint32_t CHAR = (uint32_t) Handle<Number>::Cast(TEXT->Get(X))->Value();
			uint32_t CLR = (uint32_t) Handle<Number>::Cast(COLOR->Get(X))->Value();
			s[X] = CHAR; BITS[X] = CLR;
		}
		draw_line(*f, s, BITS);
		glTranslatef(0, f->metric.h, 0);
	}
	delete[] BITS;
	return Undefined();
}

//если ваша платформа нуждается в коде начала и конца отрисовки, то поместите сюда
function (paintBegin) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	glXMakeCurrent(MESS.d, W->window, W->glx);
	glLoadIdentity();
	glColor4f(0, 0, 0, 1);
	return Undefined();
}
//и сюда
function (paintEnd) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	W->flush();
	return Undefined();
}

//не надо
/*function (native_hide_all_children) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	XUnmapSubwindows(MESS.d, W->window);
	return Undefined();
}

function (native_show_all_children) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	XMapSubwindows(MESS.d, W->window);
	return Undefined();
}
*/

//следущие три функции пока нужны, хотя всё это можно перенести в JS благо нода позволяет всё это сделать, но пока тут, потому-что куда проще было реализовать, предлагаю четыре варианта на выбор
//1) эти функции почти не меняя (только wstr на NSString) перетаскиваете к себе
//2) пишете какимито чудными неизвестными мне маковскими методами аналог чтения диры
//3) удаляете этот код и пишете аналог на JS
//4) я сам выполняю пункт 3)

function (native_isdir) {
	HandleScope handle_scope;
	using namespace unixstuff;
	struct stat t;
	str path = w2utf(WSTR(a[0]));
	stat(*path, &t);
	return Boolean::New(S_ISDIR(t.st_mode));
}

Handle<Array> convert_time(tm *m) {
	using namespace unixstuff;
	Handle<Array> C = Array::New(6);
	int j = 0;
	C->Set(j++, Integer::New(m->tm_year+1900));
	C->Set(j++, Integer::New(m->tm_mon + 1));
	C->Set(j++, Integer::New(m->tm_mday));
	C->Set(j++, Integer::New(m->tm_hour));
	C->Set(j++, Integer::New(m->tm_min));
	C->Set(j++, Integer::New(m->tm_sec));
	return C;
}
function (native_readdir) {
	HandleScope handle_scope;
	using namespace unixstuff;
	DIR *dp;
	dirent *dirp; struct stat t;
	str path = w2utf(WSTR(a[0]));
	if ((dp  = opendir(*path)) == NULL) {
		Handle<Array> A = Array::New(0);
		Handle<Object> B = Object::New();
		int j = 0;
		B->Set(String::New("name"), String::New(strerror(errno)));
		B->Set(String::New("hint"), Boolean::New(true));
		A->Set(0, B);
		return handle_scope.Close(A);
	}
	Handle<Array> A = Array::New(0);
	int i = 0;
	if (path[-1] != '/') path/'/'; //string[-1] означает последний символ в строке (первый с конца)
	while ((dirp = readdir(dp)) != NULL) {
		str s = dirp->d_name;
		if (s == "." || s == "..") continue;
		str f = path + s;
		stat(*f, &t);
		str p = "----------"; int pp = t.st_mode;
		if ((pp & 0400) != 0) p[0] = 'r';
		if ((pp & 0200) != 0) p[1] = 'w';
		if ((pp & 0100) != 0) p[2] = 'x';
		if ((pp & 0040) != 0) p[3] = 'r';
		if ((pp & 0020) != 0) p[4] = 'w';
		if ((pp & 0010) != 0) p[5] = 'x';
		if ((pp & 0004) != 0) p[6] = 'r';
		if ((pp & 0002) != 0) p[7] = 'w';
		if ((pp & 0001) != 0) p[8] = 'x';
		Handle<Object> B = Object::New();
		B->Set(String::New("name"), String::New(dirp->d_name));
		B->Set(String::New("size"), Number::New(t.st_size));
		B->Set(String::New("mode"), Integer::New(t.st_mode & 0xfff));
		B->Set(String::New("flags"), String::New(*p, !p));
		B->Set(String::New("dir"), Boolean::New(S_ISDIR(t.st_mode)));
		B->Set(String::New("ctime"), convert_time(localtime(&t.st_ctime)));
		B->Set(String::New("mtime"), convert_time(localtime(&t.st_mtime)));
		B->Set(String::New("atime"), convert_time(localtime(&t.st_atime)));
		A->Set(i++, B);
	}
	closedir(dp);
	return handle_scope.Close(A);
}

function(register_callbacks) {
// onPaint и onKey уже переписаны по-новому, тоесть теперь они не вызывают JS код
	glxwin = Persistent<Object>::New(Handle<Object>::Cast(a[0]));
	HandleScope scope;
//	fassign(onPaint);
	fassign(onCursor);
	fassign(onMouse);
//	fassign(onPaint);
//	fassign(onKey);
	fassign(onTimer);
	fassign(onChar);
	fassign(onSize);
	fassign(onPipe);
	fassign(onFocus);
	return scope.Close(Undefined());
}

//это удалить надо
Handle<Value> Method(const Arguments& args) {
  HandleScope scope;
  return scope.Close(String::New("GLXWIN!"));
}
//устанавливаем курсор для данного окна, cursor = 0,1,2,3,4,5,6
//0-pointer, 1-text,2-up-down, 3-move, 4-hand1 5-hand2 6-grab
//какие то два из них не используются, надо смотреть (поиск по setCursor *.js)

function(setCursor) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	int cursor = NUMBER(a[1]);
	W->setCursor(cursor);
	return Undefined();
}

//это магия XWindows - устанавливаем шаг для ресайза окна, тоесть если шаг=10, то окно может быть 100х100 но не 101х101, наверняка мак это умеет, но как?
function (setSizeSteps) {
	HandleScope handle_scope;
	v8win *W = (v8win*) HANDLE(a[0]);
	int w = NUMBER(a[1]);
	int h = NUMBER(a[2]);
	W->setSizeSteps(w, h);
	return Undefined();
}
//это я использую в main loop чтобы узнавать продолжает ли приложение выдавать сообщения или "вышло". если оно вернуло true то main loop заканчивается
function (x11quit) {
	return Boolean::New(MESS.quit);
}

void init(Handle<Object> exports) {
//все фу здесь предъявляются  движку v8
	node_exports = Persistent<Object>::New(Handle<Object>::Cast(exports));
	exports->Set(String::NewSymbol("hello"), FunctionTemplate::New(Method)->GetFunction());
	callbacks = Persistent<Array>::New(Handle<Array>::Cast(Array::New(0)));
	exports->Set(String::New("c++callbacks"), callbacks);

//      context->Global()
	#define function(name) exports->Set(String::NewSymbol(#name), FunctionTemplate::New(name)->GetFunction());
	function(register_callbacks)
	function(native_sh)
	function(native_isdir)
	function(native_readdir)
	function(native_copy_start)
	function(native_copy_next)
	function(v8_exit)

	function(get_xwindow_handle)
	function(create_win)
	function(show)
	function(hide)
	function(step)
	function(step_renders)
	function(x11quit)
	function(print)
	function(repaint)
	function(force_repaint)
	function(text_extent)
	function(crect)
	function(set_xywh)
	function(get_xywh)
	function(font_color)
	function(apply_font)
	function(color_text)
	function (paintBegin)
	function (paintEnd)
	function (setCursor)
	function (setSizeSteps)
}

NODE_MODULE(glxwin, init)

//далее свалка истории

/*


//	function(native_hide_all_children)
//	function(native_show_all_children)
//	function(native_open_xterm)
//	function(native_exec_xterm)

	start_shell(110);

//	function(native_glyph)
//	function(native_xhandle)
	#undef function
	context = Context::New(0, G);
	Context::Scope context_scope(context);
	bind_functions();
	str bootstrap = "bootstrap.js";
	if (!fileexists(*bootstrap)) bootstrap = exe_dir("../bootstrap.js");
	if (!fileexists(*bootstrap)) bootstrap = "/usr/lib/deodar/bootstrap.js";
	wstr r;
	try {
		r = v8_exe(bootstrap, bootstrap, true);
		if (v8_exe_error) printf("ERROR: '%s'\n", *r.compat());
	} catch (int e) {
		printf("Yaui.cpp:%i unhandled exception, terminating\n", __LINE__);
	}

	Handle<Value> args[2];
	args[0] = Number::New(0);
	args[1] = Number::New(0);
//	Handle<Value> js_result = yaui_main->Call(context->Global(), 2, args);
	return 0;
}
*/
